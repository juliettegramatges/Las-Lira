#!/usr/bin/env python3
"""
Script para extraer y organizar productos de Shopify con sus im√°genes
Convierte el CSV de export de Shopify en una base de datos m√°s √∫til
"""

import pandas as pd
import requests
import os
import json
from urllib.parse import urlparse
import sqlite3
from datetime import datetime

def extraer_productos_shopify(csv_path='products_export_1.csv'):
    """
    Extrae productos del CSV de Shopify y los organiza con sus im√°genes
    """
    print("üõçÔ∏è  Extrayendo productos de Shopify...")
    
    # Leer el CSV
    df = pd.read_csv(csv_path)
    
    # Filtrar solo productos activos y con t√≠tulo
    productos_activos = df[
        (df['Status'] == 'active') & 
        (df['Title'].notna()) & 
        (df['Title'] != '')
    ].copy()
    
    print(f"üìä Total de productos activos encontrados: {len(productos_activos)}")
    
    # Agrupar por Handle (producto √∫nico)
    productos_unicos = []
    
    for handle in productos_activos['Handle'].unique():
        if pd.isna(handle):
            continue
            
        # Obtener todas las filas para este producto
        producto_rows = productos_activos[productos_activos['Handle'] == handle]
        
        # Tomar la primera fila como base del producto
        producto_base = producto_rows.iloc[0]
        
        # Extraer todas las im√°genes
        imagenes = []
        for _, row in producto_rows.iterrows():
            if pd.notna(row['Image Src']) and row['Image Src'] != '':
                imagenes.append({
                    'url': row['Image Src'],
                    'position': int(row['Image Position']) if pd.notna(row['Image Position']) else 999,
                    'alt_text': row['Image Alt Text'] if pd.notna(row['Image Alt Text']) else ''
                })
        
        # Ordenar im√°genes por posici√≥n
        imagenes.sort(key=lambda x: x['position'])
        
        # Crear objeto del producto
        producto = {
            'handle': handle,
            'titulo': producto_base['Title'],
            'descripcion': producto_base['Body (HTML)'] if pd.notna(producto_base['Body (HTML)']) else '',
            'categoria': producto_base['Product Category'] if pd.notna(producto_base['Product Category']) else '',
            'tipo': producto_base['Type'] if pd.notna(producto_base['Type']) else '',
            'tags': producto_base['Tags'] if pd.notna(producto_base['Tags']) else '',
            'precio': float(producto_base['Variant Price']) if pd.notna(producto_base['Variant Price']) else 0,
            'precio_comparacion': float(producto_base['Variant Compare At Price']) if pd.notna(producto_base['Variant Compare At Price']) else None,
            'sku': producto_base['Variant SKU'] if pd.notna(producto_base['Variant SKU']) else '',
            'peso': float(producto_base['Variant Grams']) if pd.notna(producto_base['Variant Grams']) else 0,
            'imagenes': imagenes,
            'imagen_principal': imagenes[0]['url'] if imagenes else None,
            'total_imagenes': len(imagenes),
            'metafields': {
                'color': producto_base['Color (product.metafields.shopify.color-pattern)'] if pd.notna(producto_base['Color (product.metafields.shopify.color-pattern)']) else '',
                'material': producto_base['Material de decoraci√≥n (product.metafields.shopify.decoration-material)'] if pd.notna(producto_base['Material de decoraci√≥n (product.metafields.shopify.decoration-material)']) else '',
                'formato_papel': producto_base['Formato de papel (product.metafields.shopify.paper-format)'] if pd.notna(producto_base['Formato de papel (product.metafields.shopify.paper-format)']) else '',
                'tama√±o_papel': producto_base['Tama√±o de papel (product.metafields.shopify.paper-size)'] if pd.notna(producto_base['Tama√±o de papel (product.metafields.shopify.paper-size)']) else '',
                'caracteristicas_planta': producto_base['Caracter√≠sticas de la planta (product.metafields.shopify.plant-characteristics)'] if pd.notna(producto_base['Caracter√≠sticas de la planta (product.metafields.shopify.plant-characteristics)']) else '',
                'forma': producto_base['Forma (product.metafields.shopify.shape)'] if pd.notna(producto_base['Forma (product.metafields.shopify.shape)']) else '',
                'espacio_adecuado': producto_base['Espacio adecuado (product.metafields.shopify.suitable-space)'] if pd.notna(producto_base['Espacio adecuado (product.metafields.shopify.suitable-space)']) else '',
                'luz_solar': producto_base['Luz solar (product.metafields.shopify.sunlight)'] if pd.notna(producto_base['Luz solar (product.metafields.shopify.sunlight)']) else '',
                'forma_jarr√≥n': producto_base['Forma de jarr√≥n (product.metafields.shopify.vase-shape)'] if pd.notna(producto_base['Forma de jarr√≥n (product.metafields.shopify.vase-shape)']) else ''
            }
        }
        
        productos_unicos.append(producto)
    
    print(f"‚úÖ Productos √∫nicos procesados: {len(productos_unicos)}")
    return productos_unicos

def guardar_en_base_datos(productos, db_path='productos_shopify.db'):
    """
    Guarda los productos en una base de datos SQLite
    """
    print("üíæ Guardando en base de datos...")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Crear tabla de productos
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS productos_shopify (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            handle TEXT UNIQUE NOT NULL,
            titulo TEXT NOT NULL,
            descripcion TEXT,
            categoria TEXT,
            tipo TEXT,
            tags TEXT,
            precio REAL,
            precio_comparacion REAL,
            sku TEXT,
            peso REAL,
            imagen_principal TEXT,
            total_imagenes INTEGER,
            metafields TEXT,
            fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Crear tabla de im√°genes
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS imagenes_productos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            producto_handle TEXT,
            url TEXT NOT NULL,
            posicion INTEGER,
            alt_text TEXT,
            FOREIGN KEY (producto_handle) REFERENCES productos_shopify (handle)
        )
    ''')
    
    # Limpiar datos existentes
    cursor.execute('DELETE FROM imagenes_productos')
    cursor.execute('DELETE FROM productos_shopify')
    
    # Insertar productos
    for producto in productos:
        cursor.execute('''
            INSERT INTO productos_shopify 
            (handle, titulo, descripcion, categoria, tipo, tags, precio, precio_comparacion, 
             sku, peso, imagen_principal, total_imagenes, metafields)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            producto['handle'],
            producto['titulo'],
            producto['descripcion'],
            producto['categoria'],
            producto['tipo'],
            producto['tags'],
            producto['precio'],
            producto['precio_comparacion'],
            producto['sku'],
            producto['peso'],
            producto['imagen_principal'],
            producto['total_imagenes'],
            json.dumps(producto['metafields'])
        ))
        
        # Insertar im√°genes
        for img in producto['imagenes']:
            cursor.execute('''
                INSERT INTO imagenes_productos (producto_handle, url, posicion, alt_text)
                VALUES (?, ?, ?, ?)
            ''', (
                producto['handle'],
                img['url'],
                img['position'],
                img['alt_text']
            ))
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ Base de datos guardada en: {db_path}")

def generar_reporte(productos):
    """
    Genera un reporte de los productos extra√≠dos
    """
    print("\nüìä REPORTE DE PRODUCTOS EXTRA√çDOS")
    print("=" * 50)
    
    # Estad√≠sticas generales
    total_productos = len(productos)
    productos_con_imagenes = len([p for p in productos if p['total_imagenes'] > 0])
    total_imagenes = sum(p['total_imagenes'] for p in productos)
    
    print(f"üì¶ Total productos: {total_productos}")
    print(f"üñºÔ∏è  Productos con im√°genes: {productos_con_imagenes}")
    print(f"üì∏ Total de im√°genes: {total_imagenes}")
    
    # Por categor√≠a
    categorias = {}
    for producto in productos:
        cat = producto['categoria'] or 'Sin categor√≠a'
        categorias[cat] = categorias.get(cat, 0) + 1
    
    print(f"\nüìÇ Productos por categor√≠a:")
    for cat, count in sorted(categorias.items(), key=lambda x: x[1], reverse=True):
        print(f"   {cat}: {count}")
    
    # Por tipo
    tipos = {}
    for producto in productos:
        tipo = producto['tipo'] or 'Sin tipo'
        tipos[tipo] = tipos.get(tipo, 0) + 1
    
    print(f"\nüè∑Ô∏è  Productos por tipo:")
    for tipo, count in sorted(tipos.items(), key=lambda x: x[1], reverse=True):
        print(f"   {tipo}: {count}")
    
    # Rango de precios
    precios = [p['precio'] for p in productos if p['precio'] > 0]
    if precios:
        print(f"\nüí∞ Rango de precios:")
        print(f"   M√≠nimo: ${min(precios):,.0f}")
        print(f"   M√°ximo: ${max(precios):,.0f}")
        print(f"   Promedio: ${sum(precios)/len(precios):,.0f}")

def main():
    """
    Funci√≥n principal
    """
    print("üå∏ EXTRACTOR DE PRODUCTOS SHOPIFY - LAS LIRA")
    print("=" * 50)
    
    # Verificar que existe el archivo CSV
    csv_path = 'products_export_1.csv'
    if not os.path.exists(csv_path):
        print(f"‚ùå No se encontr√≥ el archivo: {csv_path}")
        return
    
    try:
        # Extraer productos
        productos = extraer_productos_shopify(csv_path)
        
        # Guardar en base de datos
        guardar_en_base_datos(productos)
        
        # Generar reporte
        generar_reporte(productos)
        
        print(f"\n‚úÖ ¬°Proceso completado exitosamente!")
        print(f"üìÅ Archivo de base de datos: productos_shopify.db")
        
    except Exception as e:
        print(f"‚ùå Error durante el proceso: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()



